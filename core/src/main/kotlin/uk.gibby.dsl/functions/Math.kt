package uk.gibby.dsl.functions


import kotlinx.serialization.encodeToString
import uk.gibby.dsl.driver.surrealJson
import uk.gibby.dsl.types.*

object Math {
    fun abs(number: DoubleType) = doubleType.createReference("math::abs(${number.getReference()})")
    fun abs(number: LongType) = doubleType.createReference("math::abs(${number.getReference()})")
    fun round(number: DoubleType) = longType.createReference("math::round(${number.getReference()})")
    fun ceil(number: DoubleType) = longType.createReference("math::ceil(${number.getReference()})")
    fun floor(number: DoubleType) = longType.createReference("math::floor(${number.getReference()})")
    fun fixed(number: DoubleType, decimalPlaces: LongType) = longType.createReference("math::fixed(${number.getReference()}, ${decimalPlaces.getReference()})")
    fun fixed(number: Double, decimalPlaces: LongType) = longType.createReference("math::fixed($number, ${decimalPlaces.getReference()})")
    fun fixed(number: DoubleType, decimalPlaces: Long) = longType.createReference("math::fixed(${number.getReference()}, $decimalPlaces)")
    fun max(array: ListType<Double, DoubleType>) = array.inner.createReference("array::max(${array.getReference()})")
    fun min(array: ListType<Double, DoubleType>) = array.inner.createReference("array::min(${array.getReference()})")
    @JvmName("longMin")
    fun max(array: ListType<Long, LongType>) = array.inner.createReference("array::max(${array.getReference()})")

    @JvmName("longMax")
    fun min(array: ListType<Long, LongType>) = array.inner.createReference("array::min(${array.getReference()})")

    fun mean(array: ListType<Double, DoubleType>) = doubleType.createReference("array::mean(${array.getReference()})")
    @JvmName("longMean")
    fun mean(array: ListType<Long, LongType>) = doubleType.createReference("array::mean(${array.getReference()})")
    fun median(array: ListType<Double, DoubleType>) = doubleType.createReference("array::median(${array.getReference()})")
    @JvmName("longMedian")
    fun median(array: ListType<Long, LongType>) = doubleType.createReference("array::median(${array.getReference()})")
    fun product(array: ListType<Double, DoubleType>) = doubleType.createReference("array::product(${array.getReference()})")
    @JvmName("longProduct")
    fun product(array: ListType<Long, LongType>) = doubleType.createReference("array::product(${array.getReference()})")
    fun sqrt(number: DoubleType) = doubleType.createReference("math::sqrt(${number.getReference()})")
    fun sqrt(number: LongType) = doubleType.createReference("math::sqrt(${number.getReference()})")
    fun sum(array: ListType<Double, DoubleType>) = doubleType.createReference("array::sum(${array.getReference()})")
    fun sum(array: ListType<Long, LongType>) = longType.createReference("array::sum(${array.getReference()})")
}

// Math operators

operator fun DoubleType.plus(other: DoubleType) = doubleType.createReference("(${this.getReference()} + ${other.getReference()})")
operator fun DoubleType.plus(other: LongType) = doubleType.createReference("(${this.getReference()} + ${other.getReference()})")
operator fun DoubleType.plus(other: Double) = doubleType.createReference("(${this.getReference()} + ${surrealJson.encodeToString(other)})")
operator fun DoubleType.plus(other: Long) = doubleType.createReference("(${this.getReference()} + ${surrealJson.encodeToString(other)})")
operator fun LongType.plus(other: DoubleType) = doubleType.createReference("(${this.getReference()} + ${other.getReference()})")
operator fun LongType.plus(other: LongType) = longType.createReference("(${this.getReference()} + ${other.getReference()})")
operator fun LongType.plus(other: Double) = doubleType.createReference("(${this.getReference()} + ${surrealJson.encodeToString(other)})")
operator fun LongType.plus(other: Long) = longType.createReference("(${this.getReference()} + ${surrealJson.encodeToString(other)})")
operator fun DoubleType.minus(other: DoubleType) = doubleType.createReference("(${this.getReference()} - ${other.getReference()})")
operator fun DoubleType.minus(other: LongType) = doubleType.createReference("(${this.getReference()} - ${other.getReference()})")
operator fun DoubleType.minus(other: Double) = doubleType.createReference("(${this.getReference()} - ${surrealJson.encodeToString(other)})")
operator fun DoubleType.minus(other: Long) = doubleType.createReference("(${this.getReference()} - ${surrealJson.encodeToString(other)})")
operator fun LongType.minus(other: DoubleType) = doubleType.createReference("(${this.getReference()} - ${other.getReference()})")
operator fun LongType.minus(other: LongType) = longType.createReference("(${this.getReference()} - ${other.getReference()})")
operator fun LongType.minus(other: Double) = doubleType.createReference("(${this.getReference()} - ${surrealJson.encodeToString(other)})")
operator fun LongType.minus(other: Long) = longType.createReference("(${this.getReference()} - ${surrealJson.encodeToString(other)})")
operator fun DoubleType.times(other: DoubleType) = doubleType.createReference("(${this.getReference()} * ${other.getReference()})")
operator fun DoubleType.times(other: LongType) = doubleType.createReference("(${this.getReference()} * ${other.getReference()})")
operator fun DoubleType.times(other: Double) = doubleType.createReference("(${this.getReference()} * ${surrealJson.encodeToString(other)})")
operator fun DoubleType.times(other: Long) = doubleType.createReference("(${this.getReference()} * ${surrealJson.encodeToString(other)})")
operator fun LongType.times(other: DoubleType) = doubleType.createReference("(${this.getReference()} * ${other.getReference()})")
operator fun LongType.times(other: LongType) = longType.createReference("(${this.getReference()} * ${other.getReference()})")
operator fun LongType.times(other: Double) = doubleType.createReference("(${this.getReference()} * ${surrealJson.encodeToString(other)})")
operator fun LongType.times(other: Long) = longType.createReference("(${this.getReference()} * ${surrealJson.encodeToString(other)})")
operator fun DoubleType.div(other: DoubleType) = doubleType.createReference("(${this.getReference()} / ${other.getReference()})")
operator fun DoubleType.div(other: LongType) = doubleType.createReference("(${this.getReference()} / ${other.getReference()})")
operator fun DoubleType.div(other: Double) = doubleType.createReference("(${this.getReference()} / ${surrealJson.encodeToString(other)})")
operator fun DoubleType.div(other: Long) = doubleType.createReference("(${this.getReference()} / ${surrealJson.encodeToString(other)})")
operator fun LongType.div(other: DoubleType) = doubleType.createReference("(${this.getReference()} / ${other.getReference()})")
operator fun LongType.div(other: LongType) = longType.createReference("(${this.getReference()} / ${other.getReference()})")
operator fun LongType.div(other: Double) = doubleType.createReference("(${this.getReference()} / ${surrealJson.encodeToString(other)})")
operator fun LongType.div(other: Long) = longType.createReference("(${this.getReference()} / ${surrealJson.encodeToString(other)})")
operator fun DoubleType.rem(other: DoubleType) = doubleType.createReference("(${this.getReference()} % ${other.getReference()})")
operator fun DoubleType.rem(other: LongType) = doubleType.createReference("(${this.getReference()} % ${other.getReference()})")
operator fun DoubleType.rem(other: Double) = doubleType.createReference("(${this.getReference()} % ${surrealJson.encodeToString(other)})")
operator fun DoubleType.rem(other: Long) = doubleType.createReference("(${this.getReference()} % ${surrealJson.encodeToString(other)})")
operator fun LongType.rem(other: DoubleType) = doubleType.createReference("(${this.getReference()} % ${other.getReference()})")
operator fun LongType.rem(other: LongType) = longType.createReference("(${this.getReference()} % ${other.getReference()})")
operator fun LongType.rem(other: Double) = doubleType.createReference("(${this.getReference()} % ${surrealJson.encodeToString(other)})")
operator fun LongType.rem(other: Long) = longType.createReference("(${this.getReference()} % ${surrealJson.encodeToString(other)})")
